#+TITLE: Divine User Manuel
:PREAMBLE:
#+AUTHOR: Thibault Polge
#+EMAIL: thibault@thb.lt
#+DATE: 2020
#+LANGUAGE: en

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Divine: (divine).
#+TEXINFO_DIR_DESC: Modal editing interface

#+TEXINFO_DEFFN: t
#+OPTIONS: H:4 num:3 toc:2
# Uncomment in 2021.
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-copyright-years
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-version-strings

Divine is a modal editing interface for Emacs, inspired by Vim, but
which doesn't try to emulate Vim.  Instead, it attempts to bring modal
editing to Emacs in a way that feels (reasonably) native and integrate
well with common Emacs bindings.

This manual is for Divine version call_git-rev().

#+BEGIN_QUOTE
Copyright (C) 2020 Thibault Polge <thibault@thb.lt>

You can redistribute this document and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

This document is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.
#+END_QUOTE
:END:

#+NAME: git-rev
#+begin_src emacs-lisp :exports none :results raw
  (shell-command-to-string "git describe --always")
#+end_src


#+NAME: describe
#+begin_src emacs-lisp :var func='nil var='nil :exports none :results value raw hsilent
  (let ((type (cond ((and func (macrop func)) "Macro")
                    (func "Function")
                    (var "Variable")
                    (t (error "Cannot describe %s as a function or %s as a variable." func var))))
          (doc (documentation func t)) )
      (with-temp-buffer
        (insert (format " - %s: *%s*\n\n" type (symbol-name func)))
        (if func (insert (documentation func nil)) (documentation-property var 'variable-documentation nil))
        (when func
          (goto-char (point-max))
          (delete-char -1)
          (beginning-of-line)
          (delete-char 4)
          (kill-line)
          (goto-char (point-min))
          (end-of-line)
          (insert " /")
          (yank)
          (insert "/")
          ;; Indent
          (while (not (eobp))
            (next-logical-line)
            (beginning-of-line)
            (insert "    "))
        (buffer-string))))
#+end_src

* Introduction

*Divine is beta software.*

Divine is a lightweight and extensible modal interface for Emacs, with
support for Vi-like text objects, but designed to integrate naturally
with Emacs.

Divine is made of three components: a (reasonably) complete modal
interface for Emacs, a library of operators and text
objects, and the core framework for building modal interfaces.  This
README describe only the latter; if you wish to build your own modal
interface with Divine, see the manual.

* Installation

** Manual installation

Clone the source repository somewhere in your =load-path=, and convert
this manual to texinfo by running:

#+begin_src shell
  makeinfo --no-split divine.texi -o divine.info
  install-info divine.info --dir=dir
#+end_src

** TODO Install from Melpa

** TODO Install from Git, with Borg

** TODO Install from Git, with Straight

* A Tour of Divine

This chapter is an informal introduction to Divine.

** Starting Divine
:PROPERTIES:
:nonode: t
:END:

To get started, open any buffer you like and make sure you're in
normal mode by running =M-x divine-normal-mode RET=. (Divine tries to
be smart about the mode it starts in, so some buffers may start in
insert mode)

** Basic motion
:PROPERTIES:
:nonode: t
:END:

Basic motion is very close to ordinary Emacs commands: =F= will go
forward one character, =B= backward.  =f= and =b= will move forward
and backward a word, respectively.

With =p= and =n=, you move to the previous
and the next visible line, respectively.  =a= and =e= go to the
beginning and end of the current line, =A= end =E= move through
sentences.

=isearch= is on =s=, =r= for backwards.  =S= and =R= activate regexp
search.


** Operators
:PROPERTIES:
:nonode: t
:END:

Like Vim and other modal editors, Divine has operators.  Operators are
commands that act on a region.  Calling an operator with a non-empty
region active will execute immediately.  In normal mode, mark some
text (=m= toggles the mark) and press =d= to delete it.  If no region
active region exists, the operator becomes “pending” until the point
moves.  When the point has moved, it runs on the text range between
the previous and the new point position.

Here's a very simple example, again with =d=, the deletion operator.
If you move to the end of a line and press =d=, the cursor starts
blinking fast and “Pending” appears in the echo area.  Press =a= to go
to the beginning of the line, and the line disappears (cancel with
=u=).

All the basic operators have a “magic” motion that can be triggered by
pressing them twice: =dd= kills the current line, =cc= does the same,
but enters insert mode immediately after, =ww= copies it to the
kill-ring, and so on.


* Fundamental concepts
:PROPERTIES:
:custom_id: fundamental-concepts
:END:

This section describes the fundamental concepts of Divine.

People who wish to use Divine as a framework should read this section
closely.  Although most examples assume that the standard Divine
interface, its presentation is general enough.

** Modes

Divine is a modal interface.  A modal interface is an interface in
which the results of an action is determined by the current mode.
Although Divine provides a complete set modes, this chapter will only
focus on the two most essential: *Normal* and *Insert*.

 - *Insert mode* ::  is similar to regular Emacs, except it has a
   binding to switch to Normal mode.

*Normal mode* binds single letters to composable action and motion
commands.  It is also the entry point to other modes.

Modes in Divine can be activated permanently or temporarily.
Temporary activation is called *transient*.  A transient mode will
terminate and revert to the previous mode as soon as an action has
completed.

Being transient isn't a property of the mode, but of the activation of
a mode.

** Commands

A *command* is nothing more than a regular Emacs command, that is, an
~(interactive)~ function.  Commands can be bound in Divine the same
way they're bound in regular Emacs.  Because Divine underlying
interface is a bit more tricky than Emacs',

** Operators

An *operator* is a command that operates on a region.  Actions are
normally bound to Normal mode.  If an action is invoked with an
existing, non empty region, it is run immediately on this region.

Otherwise, the normal mode switches to the “pending object” state.  In
this state, the next motion action creates a region, and the command
is run on this region.  For example, the sequence:

#+begin_example
  d5F
#+end_example

will delete the five next words.

 - =d= is the default binding to the kill command.  If d is run on a
   region, the region is immediately deleted and copied to kill ring.
 - =5= is a regular prefix argument
 - =F= is the default binding for the forward word command.

** Motion and text objects

*Motions* are commands that move the point around.  If they're entered
without a pending operator, they move the point and terminate
immediately.  If there's a pending operator, they move the point and
execute this operator on the resulting region.

A *Text object* is a motion command that move both the point AND
the mark.

Motions can have *scopes*.

** Numeric arguments

Like Emacs, Divine operators

* Extending Divine
:PROPERTIES:
:custom_id: extending-divine
:END:

This chapter describes how you can add create your own operators,
motions, and modes on top of the standard interface.

** Creating operators

A Divine operator is a command that operates on an existing region, if
there's one (usually in one of the =select-*-modes=), or that declares
itself as “pending” until a motion command has created a region.

#+CALL:describe(func='divine-defcommand,var=3)

#+RESULTS:
:  - FUNCTION: *divine-defcommand*
:

To access the prefix argument from within an operator, see
[[#reading-prefix-arg]].

** Creating motions and text objects

** Creating hybrid bindings

** Using the numeric argument
:PROPERTIES:
:custom_id: reading-prefix-arg
:END:

** Creating modes

#+CALL: describe(func='divine-defmode)

* The Divine framework
:PROPERTIES:
:custom_id: framework
:END:

Divine was designed with extensibility and modularity in mind.  The
modal user interface Divine provides is implemented on top of a very
abstract core, contained in =divine-core.el=.  This core has no
dependencies besides core Emacs.  This chapter describes what it
provides, and how you can write custom modal interfaces over it.

Notice that the commands library =divine-commands.el= makes very few
assumptions about the general interface it's called from, and thus is
generally usable to implement custom Divine interfaces.

** The bare minimum

The core is not complete in itself.  You need to provide at least the
=divine-start= function.

 - *divine-start*

   =divine-mode= calls =divine-start= with no argument to initialize
   Divine.  =divine-start= should activate a Divine mode (or calling
   =divine-mode= will have no effect) and can do can do anything
   needed to initialize Divine.

   In the default interface, divine-start also registers a few hooks.

** Scopes internals

The standard scope modifiers =around= and =inside= are not part of the
core.  All the core provides is a scope definition macro,
=divine-defscope=.

#+CALL: describe(func='divine-defscope)

** Key binding interface internals



* Export data :noexport:

#+begin_src css :tangle manual.css
  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,400i,700,700i&display=swap');



  /* $base03:    #002b36; */
  /* $base02:    #073642; */
  /* $base01:    #586e75; */
  /* $base00:    #657b83; */
  /* $base0:     #839496; */
  /* $base1:     #93a1a1; */
  /* $base2:     #eee8d5; */
  /* $base3:     #fdf6e3; */
  /* $yellow:    #b58900; */
  /* $orange:    #cb4b16; */
  /* $red:       #dc322f; */
  /* $magenta:   #d33682; */
  /* $violet:    #6c71c4; */
  /* $blue:      #268bd2; */
  /* $cyan:      #2aa198; */
  /* $green:     #859900; */

  body {
      font-family: Montserrat;
      background:#fdf6e3;
      color: #586e75;
      max-width: 50em;
      margin: auto;
  }

  a {
      color: #268bd2;
  }

  a:visited {
      color: #6c71c4;
  }

  body  div {
      width: 30em;
  }

  blockquote {
      background: #eee8d5;
      border: thin solid black;
      margin-left: 0;
      margin-right: 0;
      padding-left: 2em;
      padding-right: 2em;

  }
#+end_src
