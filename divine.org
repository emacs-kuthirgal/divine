#+TITLE: Divine User Manuel
:PREAMBLE:
#+AUTHOR: Thibault Polge
#+EMAIL: thibault@thb.lt
#+DATE: 2020
#+LANGUAGE: en

#+TEXINFO_DEFFN: t
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Divine: (divine).

#+TEXINFO_DIR_DESC: Modal editing interface

#+OPTIONS: H:4 num:2 toc:2
# Uncomment in 2021.
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-copyright-years
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-version-strings

Divine is a modal editing interface for Emacs, inspired by Vim, but
which doesn't try to emulate Vim.  Instead, it attempts to bring modal
editing to Emacs in a way that feels (reasonably) native and integrate
well with common Emacs bindings.

This manual is for Divine version call_git-rev().

#+BEGIN_QUOTE
  Copyright \copy 2020 Thibault Polge <thibault@thb.lt>

  You can redistribute this document and/or modify it under the terms
  of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any
  later version.

  This document is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.
#+END_QUOTE
:END:

#+NAME: git-rev
#+begin_src emacs-lisp :exports none :results raw
  (shell-command-to-string "git describe --always")
#+end_src


#+NAME: describe
#+begin_src emacs-lisp :var func='nil var='nil :exports none :results value raw hsilent
  (let ((type (cond ((and func (macrop func)) "Macro")
                    (func "Function")
                    (var "Variable")
                    (t (error "Cannot describe %s as a function or %s as a variable." func var))))
          (doc (documentation func t)) )
      (with-temp-buffer
        (insert (format " - %s: %s \n\n" type (symbol-name func)))
        (if func (insert (documentation func nil)) (documentation-property var 'variable-documentation nil))
        (when func
          (goto-char (point-max))
          (delete-char -1)
          (beginning-of-line)
          (delete-char 4)
          (kill-line)
          (goto-char (point-min))
          (end-of-line)
          (yank)
            ;; Indent
          (while (not (eobp))
            (next-logical-line)
            (beginning-of-line)
            (insert "    "))
        (buffer-string))))
#+end_src

* TODO Introduction

*Divine is beta software.*

Divine is a lightweight and extensible modal interface for Emacs, with
support for Vi-like text objects, but designed to integrate naturally
with Emacs.

Divine is made of three components: a (reasonably) complete modal
interface for Emacs, a library of operators and text
objects, and the core framework for building modal interfaces.  This
README describe only the latter; if you wish to build your own modal
interface with Divine, see the manual.

* Installation

** Manual installation

Clone the source repository somewhere in your ~load-path~, and convert
this manual to texinfo by running:

#+begin_src shell
  makeinfo --no-split divine.texi -o divine.info
  install-info divine.info --dir=dir
#+end_src

Then load Divine from Emacs

#+begin_src emacs-lisp
  (require 'divine)
  (divine-global-mode)
#+end_src

** TODO Install from Melpa

Divine is not yet available from Melpa. When it will be,

** TODO Install from Git, with Borg

** TODO Install from Git, with Straight

* A Tour of Divine
:PROPERTIES:
:custom_id: tour
:END:
This chapter is an informal introduction to Divine.

** Starting Divine
:PROPERTIES:
:nonode: t
:END:

To get started, open any buffer you like and make sure you're in
normal mode by running =M-x divine-normal-mode RET=. (Divine tries to
be smart about the mode it starts in, so some buffers may start in
insert mode)

The minor mode lighter shows the active state.  It should display
=Divine<N>=.

** Basic motion
:PROPERTIES:
:nonode: t
:END:

Basic motion is very close to ordinary Emacs commands: =F= will go
forward one character, =B= backward.  =f= and =b= will move forward
and backward a word, respectively.

With =p= and =n=, you move to the previous
and the next visible line, respectively.  =a= and =e= go to the
beginning and end of the current line, =A= end =E= move through
sentences.

=isearch= is on =s=, =r= for backwards.  =S= and =R= activate regexp
search.



* Editing with Divine
:PROPERTIES:
:custom_id: fundamental-concepts
:END:

This section is a complete presentation of the Divine editing
features.  A less formal, but less complete, presentation can be found
in [[#tour]], which is a recommended read.

People who wish to build their own modal interface over the Divine
core may skip most of this chapter, but should nonetheless read the
description of the fundamental Divine concepts at the top of each node.

** Motion commands

*** About motions
:PROPERTIES:
:nonode: t
:END:

In Divine, a *motion* is a command that moves the point around.
Divine motions are nothing special, and are often regular Emacs
commands.  Motions can be used in two ways.  You can use them like in
regular Emacs, to move around in a buffer.  They can also be combined
with [[#operators]] to determine the region they operate on.

Divine provides the following motion commands:

*** Basic motion
:PROPERTIES:
:nonode: t
:END:

 - Key: =b=, COUNT word(s) forward.
 - Key: =f=, COUNT word(s) backward.
 - Key: =B=, COUNT words(s) forward, in ~superword-mode~.
 - Key: =F=, COUNT words(s) backward, in ~superword-mode~.
 - Key: =C-B=, COUNT characters(s) forward.
 - Key: =C-F=, COUNT characters(s) backward.
 - Key: =p= , COUNT line(s) forward.
 - Key: =n=, COUNT line(s) backward.
 - Key: =p= , COUNT paragraphs(s) forward.
 - Key: =n=, COUNT paragraphs(s) backward.
 - Key: =a= , to the first non last character of current line.
 - Key: =e=, to the first non blank character of current line.

*** Moving by searching
:PROPERTIES:
:nonode: t
:END:

- Key: =t=, Before COUNTh occurrence of CHAR forward (after if SCOPE).
- Key: =T=, Before COUNTh occurrence of CHAR backward (after if SCOPE).
- Key: =s=, isearch forward.
- Key: =S=, isearch backward.

*** Moving around balanced expressions
:PROPERTIES:
:nonode: t
:END:


** Text objects

A text object is similar to a motion, except that it can move both the
point and the mark.  There are two types of text objects: scoped
motions, which are motions that accept a scope modifier, and pure text
objects, which cannot be used as motions.

*** Scopes
:PROPERTIES:
:nonode: t
:END:

Divine has two standard scopes: =inside= and =around=, activated by
=i= and =ii=, respectively.  Most basic motion commands respect these
scopes, and behave as text objects when one is active.  For example,
=di2w= will delete two full words, starting from the one the point's
on.  =da2w= will do the same, also eating the surrounding space.

*** Standard text objects
:PROPERTIES:
:nonode: t
:END:

*** Special text object
:PROPERTIES:
:nonode: t
:END:

A special text object is a text object that can replace a pending
operator with an alternative, before executing it.  The only special
object in standard Divine is =w=.

 - Key: =w=, Balanced expression text object.

   Prompt for a pair delimiter, and selects the COUNTh balanced
   expression containing the point and bounded by this delimiter.

   If SCOPE is =inside=, the contents of the expressions are selected.

   If SCOPE is =around=, the delimiters are selected as well.

   If no SCOPE, and =divine-kill= or =divine-change= are pending, =w=
   replaces them with ~divine-unwrap~ or ~divine-rewrap~,
   respectively.

** Actions

- Key: =r=, replace character at point.
- Key: =x=, kill character at point.


** Modes


Divine is a modal interface.  A modal interface is an interface in
which the results of an action is determined by the current mode.
Although Divine provides a complete set modes, this chapter will only
focus on the two most essential: *Normal* and *Insert*.

 - *Insert mode* ::  is similar to regular Emacs, except it has a
   binding to switch to Normal mode.

*Normal mode* binds single letters to composable action and motion
commands.  It is also the entry point to other modes.

Modes in Divine can be activated permanently or temporarily.
Temporary activation is called *transient*.  A transient mode will
terminate and revert to the previous mode as soon as an action has
completed.

Being transient isn't a property of the mode, but of the activation of
a mode.

** Commands

A *command* is nothing more than a regular Emacs command, that is, an
~(interactive)~ function.  Commands can be bound in Divine the same
way they're bound in regular Emacs.  Because Divine underlying
interface is a bit more tricky than Emacs',

** Operators
:PROPERTIES:
:custom_id: operators
:END:

*** What are operators?
:PROPERTIES:
:nonode: t
:END:

Like Vim and other modal editors, Divine has *operators*.  At their
core, most operators are commands that act on a region.  If a region
is active, invoking an operator will run it on that region, in the
same way Emacs' ordinary ~*-region~ commands act (as an example,
pressing =d= will immediately delete the region).  If no region is
active, though, Divine enters the “pending operator” state.  The
operator is then said to be “pending”, and will run as soon as the
point moves, between its previous and new positions.

*** Standard operators
:PROPERTIES:
:nonode: t
:END:

The first three operators' bindings can be pressed twice to operate on
the curent line.  For example, =dd= kills the current line.

 - Key: =d=, Kill REGION* to REGISTER.
 - Key: =c=, Kill REGION* to REGISTER, then enter insert mode.
 - Key: =w=, Copy REGION* to REGISTER.

 - Key: =w=, wrap REGION.
 - Key: =SPC o=, Sort REGION.



* Extending Divine
:PROPERTIES:
:custom_id: extending-divine
:END:

This chapter describes how you can add create your own operators,
motions, and modes on top of the standard interface.

** Creating operators

#+CALL:describe(func='divine-defoperator)

To access the prefix argument from within an operator, see
[[#reading-prefix-arg]].

** Creating motions and text objects

** Creating hybrid bindings

** Using the numeric argument
:PROPERTIES:
:custom_id: reading-prefix-arg
:END:

** Creating modes

#+CALL: describe(func='divine-defmode)

* The Divine framework
:PROPERTIES:
:custom_id: framework
:END:

Divine was designed with extensibility and modularity in mind.  The
modal user interface Divine provides is implemented on top of a very
abstract core, contained in =divine-core.el=.  This core has no
dependencies besides core Emacs.  This chapter describes what it
provides, and how you can write custom modal interfaces over it.

Notice that the commands library =divine-commands.el= makes very few
assumptions about the general interface it's called from, and thus is
generally usable to implement custom Divine interfaces.

** The bare minimum

The core is not complete in itself.  You need to provide at least the
=divine-start= function.

 - *divine-start*

   =divine-mode= calls =divine-start= with no argument to initialize
   Divine.  =divine-start= should activate a Divine mode (or calling
   =divine-mode= will have no effect) and can do can do anything
   needed to initialize Divine.

   In the default interface, divine-start also registers a few hooks.

** Scopes internals

The standard scope modifiers =around= and =inside= are not part of the
core.  All the core provides is a scope definition macro,
=divine-defscope=.

#+CALL: describe(func='divine-defscope)

** Key binding interface internals
* Export data                                                      :noexport:

#+begin_src css :tangle manual.css
  @import url('https://fonts.googleapis.com/css?family=Montserrat:400,400i,700,700i&display=swap');

  /* $base03:    #002b36; */
  /* $base02:    #073642; */
  /* $base01:    #586e75; */
  /* $base00:    #657b83; */
  /* $base0:     #839496; */
  /* $base1:     #93a1a1; */
  /* $base2:     #eee8d5; */
  /* $base3:     #fdf6e3; */
  /* $yellow:    #b58900; */
  /* $orange:    #cb4b16; */
  /* $red:       #dc322f; */
  /* $magenta:   #d33682; */
  /* $violet:    #6c71c4; */
  /* $blue:      #268bd2; */
  /* $cyan:      #2aa198; */
  /* $green:     #859900; */

  body {
      font-family: Montserrat;
      background: #eee8d5;
background: #fdf6e3;
      color: #586e75;
      max-width: 50em;
      margin: auto;
  }

  a {
      color: #268bd2;
  }

  a:visited {
      color: #6c71c4;
  }

  blockquote {
      background: #eee8d5;
      margin-left: 0;
      margin-right: 0;
      padding-left: 2em;
      padding-right: 2em;
      border: thin solid #93a1a1;
  }

  div.example, div.lisp {
      padding: .25em 1em;
      margin-left: 0;
  }

  div.example {
      background-color: #002b36;
      color: #93a1a1;
  }

  div.lisp {
      background-color: #eee8d5;
      color: #586e75;
      border: thin solid #93a1a1;
  }

  dl dt samp {
      display: inline-block;
      background-color: #fdf6e3; //#eee8d5;
      color: #586e75;
      border: thin solid #eee8d5;
      padding: 0 .5ex;
      border-radius: .5ex;
}

#+end_src
